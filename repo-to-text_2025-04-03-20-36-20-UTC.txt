Directory: FitnessApp

Directory Structure:
```
.
├── .gitignore

```

Contents of README.md:
```
![image](https://github.com/user-attachments/assets/6edf53cc-9170-4701-974f-74b8f59ab147)

```

Contents of FitnessApp.xcodeproj/project.pbxproj:
```
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 77;
	objects = {

/* Begin PBXBuildFile section */
		5DEB63AD2D7F093000951C87 /* FirebaseFirestore in Frameworks */ = {isa = PBXBuildFile; productRef = 5DEB63AC2D7F093000951C87 /* FirebaseFirestore */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		5D37F6D02D3E5E8D002DBA5E /* FitnessApp.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = FitnessApp.app; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFileSystemSynchronizedRootGroup section */
		5D37F6D22D3E5E8D002DBA5E /* FitnessApp */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			path = FitnessApp;
			sourceTree = "<group>";
		};
/* End PBXFileSystemSynchronizedRootGroup section */

/* Begin PBXFrameworksBuildPhase section */
		5D37F6CD2D3E5E8D002DBA5E /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				5DEB63AD2D7F093000951C87 /* FirebaseFirestore in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		5D37F6C72D3E5E8D002DBA5E = {
			isa = PBXGroup;
			children = (
				5D37F6D22D3E5E8D002DBA5E /* FitnessApp */,
				5D37F6D12D3E5E8D002DBA5E /* Products */,
			);
			sourceTree = "<group>";
		};
		5D37F6D12D3E5E8D002DBA5E /* Products */ = {
			isa = PBXGroup;
			children = (
				5D37F6D02D3E5E8D002DBA5E /* FitnessApp.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		5D37F6CF2D3E5E8D002DBA5E /* FitnessApp */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 5D37F6DE2D3E5E90002DBA5E /* Build configuration list for PBXNativeTarget "FitnessApp" */;
			buildPhases = (
				5D37F6CC2D3E5E8D002DBA5E /* Sources */,
				5D37F6CD2D3E5E8D002DBA5E /* Frameworks */,
				5D37F6CE2D3E5E8D002DBA5E /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			fileSystemSynchronizedGroups = (
				5D37F6D22D3E5E8D002DBA5E /* FitnessApp */,
			);
			name = FitnessApp;
			packageProductDependencies = (
				5DEB63AC2D7F093000951C87 /* FirebaseFirestore */,
			);
			productName = FitnessApp;
			productReference = 5D37F6D02D3E5E8D002DBA5E /* FitnessApp.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		5D37F6C82D3E5E8D002DBA5E /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1620;
				LastUpgradeCheck = 1620;
				TargetAttributes = {
					5D37F6CF2D3E5E8D002DBA5E = {
						CreatedOnToolsVersion = 16.2;
					};
				};
			};
			buildConfigurationList = 5D37F6CB2D3E5E8D002DBA5E /* Build configuration list for PBXProject "FitnessApp" */;
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 5D37F6C72D3E5E8D002DBA5E;
			minimizedProjectReferenceProxies = 1;
			packageReferences = (
				5DEB63AB2D7F093000951C87 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */,
			);
			preferredProjectObjectVersion = 77;
			productRefGroup = 5D37F6D12D3E5E8D002DBA5E /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				5D37F6CF2D3E5E8D002DBA5E /* FitnessApp */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		5D37F6CE2D3E5E8D002DBA5E /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		5D37F6CC2D3E5E8D002DBA5E /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		5D37F6DC2D3E5E90002DBA5E /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.1;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		5D37F6DD2D3E5E90002DBA5E /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.1;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		5D37F6DF2D3E5E90002DBA5E /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				CODE_SIGN_ENTITLEMENTS = FitnessApp/FitnessApp.entitlements;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"FitnessApp/Preview Content\"";
				DEVELOPMENT_TEAM = 6X2626RZHL;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.healthcare-fitness";
				INFOPLIST_KEY_NSHealthShareUsageDescription = "Please allow access to enjoy all features of the app";
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.aiXCodes.FitnessApp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		5D37F6E02D3E5E90002DBA5E /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				CODE_SIGN_ENTITLEMENTS = FitnessApp/FitnessApp.entitlements;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"FitnessApp/Preview Content\"";
				DEVELOPMENT_TEAM = 6X2626RZHL;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.healthcare-fitness";
				INFOPLIST_KEY_NSHealthShareUsageDescription = "Please allow access to enjoy all features of the app";
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.aiXCodes.FitnessApp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		5D37F6CB2D3E5E8D002DBA5E /* Build configuration list for PBXProject "FitnessApp" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				5D37F6DC2D3E5E90002DBA5E /* Debug */,
				5D37F6DD2D3E5E90002DBA5E /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		5D37F6DE2D3E5E90002DBA5E /* Build configuration list for PBXNativeTarget "FitnessApp" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				5D37F6DF2D3E5E90002DBA5E /* Debug */,
				5D37F6E02D3E5E90002DBA5E /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */

/* Begin XCRemoteSwiftPackageReference section */
		5DEB63AB2D7F093000951C87 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */ = {
			isa = XCRemoteSwiftPackageReference;
			repositoryURL = "https://github.com/firebase/firebase-ios-sdk";
			requirement = {
				kind = upToNextMajorVersion;
				minimumVersion = 11.9.0;
			};
		};
/* End XCRemoteSwiftPackageReference section */

/* Begin XCSwiftPackageProductDependency section */
		5DEB63AC2D7F093000951C87 /* FirebaseFirestore */ = {
			isa = XCSwiftPackageProductDependency;
			package = 5DEB63AB2D7F093000951C87 /* XCRemoteSwiftPackageReference "firebase-ios-sdk" */;
			productName = FirebaseFirestore;
		};
/* End XCSwiftPackageProductDependency section */
	};
	rootObject = 5D37F6C82D3E5E8D002DBA5E /* Project object */;
}

```

Contents of FitnessApp.xcodeproj/xcuserdata/aix.xcuserdatad/xcschemes/xcschememanagement.plist:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>SchemeUserState</key>
	<dict>
		<key>FitnessApp.xcscheme_^#shared#^_</key>
		<dict>
			<key>orderHint</key>
			<integer>0</integer>
		</dict>
	</dict>
</dict>
</plist>

```

Contents of FitnessApp.xcodeproj/project.xcworkspace/contents.xcworkspacedata:
```
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>

```

Contents of FitnessApp.xcodeproj/project.xcworkspace/xcuserdata/aix.xcuserdatad/UserInterfaceState.xcuserstate:
```
[Could not decode file contents]

```

Contents of FitnessApp.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved:
```
{
  "originHash" : "c63c63846d9c539229e96de38d6af51417e28c0ee9a0bc48bd0f0f19d923c329",
  "pins" : [
    {
      "identity" : "abseil-cpp-binary",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/abseil-cpp-binary.git",
      "state" : {
        "revision" : "bbe8b69694d7873315fd3a4ad41efe043e1c07c5",
        "version" : "1.2024072200.0"
      }
    },
    {
      "identity" : "app-check",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/app-check.git",
      "state" : {
        "revision" : "61b85103a1aeed8218f17c794687781505fbbef5",
        "version" : "11.2.0"
      }
    },
    {
      "identity" : "firebase-ios-sdk",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/firebase/firebase-ios-sdk",
      "state" : {
        "revision" : "eb523407e4293568ed55590728205c359cbecc5b",
        "version" : "11.9.0"
      }
    },
    {
      "identity" : "googleappmeasurement",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleAppMeasurement.git",
      "state" : {
        "revision" : "d80e25104abe76d69a134d4ec18f011edd8df06c",
        "version" : "11.9.0"
      }
    },
    {
      "identity" : "googledatatransport",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleDataTransport.git",
      "state" : {
        "revision" : "617af071af9aa1d6a091d59a202910ac482128f9",
        "version" : "10.1.0"
      }
    },
    {
      "identity" : "googleutilities",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleUtilities.git",
      "state" : {
        "revision" : "53156c7ec267db846e6b64c9f4c4e31ba4cf75eb",
        "version" : "8.0.2"
      }
    },
    {
      "identity" : "grpc-binary",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/grpc-binary.git",
      "state" : {
        "revision" : "cc0001a0cf963aa40501d9c2b181e7fc9fd8ec71",
        "version" : "1.69.0"
      }
    },
    {
      "identity" : "gtm-session-fetcher",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/gtm-session-fetcher.git",
      "state" : {
        "revision" : "4d70340d55d7d07cc2fdf8e8125c4c126c1d5f35",
        "version" : "4.4.0"
      }
    },
    {
      "identity" : "interop-ios-for-google-sdks",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/interop-ios-for-google-sdks.git",
      "state" : {
        "revision" : "040d087ac2267d2ddd4cca36c757d1c6a05fdbfe",
        "version" : "101.0.0"
      }
    },
    {
      "identity" : "leveldb",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/firebase/leveldb.git",
      "state" : {
        "revision" : "a0bc79961d7be727d258d33d5a6b2f1023270ba1",
        "version" : "1.22.5"
      }
    },
    {
      "identity" : "nanopb",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/firebase/nanopb.git",
      "state" : {
        "revision" : "b7e1104502eca3a213b46303391ca4d3bc8ddec1",
        "version" : "2.30910.0"
      }
    },
    {
      "identity" : "promises",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/promises.git",
      "state" : {
        "revision" : "540318ecedd63d883069ae7f1ed811a2df00b6ac",
        "version" : "2.4.0"
      }
    },
    {
      "identity" : "swift-protobuf",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/apple/swift-protobuf.git",
      "state" : {
        "revision" : "d72aed98f8253ec1aa9ea1141e28150f408cf17f",
        "version" : "1.29.0"
      }
    }
  ],
  "version" : 3
}

```

Contents of FitnessApp/FitnessApp.entitlements:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.developer.healthkit</key>
	<true/>
</dict>
</plist>

```

Contents of FitnessApp/FitnessApp.swift:
```
//
//  FitnessAppApp.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import SwiftUI
import FirebaseCore

class AppDelegate: NSObject, UIApplicationDelegate {
  func application(_ application: UIApplication,
                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
    FirebaseApp.configure()
    return true
  }
}


@main
struct FitnessApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    var body: some Scene {
        WindowGroup {
            FitnessTabView()
        }
    }
}

```

Contents of FitnessApp/GoogleService-Info.plist:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>API_KEY</key>
	<string>AIzaSyC6oK84MFWANZX-kj1sf8HhUD6MBXGQ71U</string>
	<key>GCM_SENDER_ID</key>
	<string>844066162813</string>
	<key>PLIST_VERSION</key>
	<string>1</string>
	<key>BUNDLE_ID</key>
	<string>com.aiXCodes.FitnessApp</string>
	<key>PROJECT_ID</key>
	<string>fitnessapp-8d117</string>
	<key>STORAGE_BUCKET</key>
	<string>fitnessapp-8d117.firebasestorage.app</string>
	<key>IS_ADS_ENABLED</key>
	<false></false>
	<key>IS_ANALYTICS_ENABLED</key>
	<false></false>
	<key>IS_APPINVITE_ENABLED</key>
	<true></true>
	<key>IS_GCM_ENABLED</key>
	<true></true>
	<key>IS_SIGNIN_ENABLED</key>
	<true></true>
	<key>GOOGLE_APP_ID</key>
	<string>1:844066162813:ios:cff04eafc22c584bb84914</string>
</dict>
</plist>
```

Contents of FitnessApp/FitnessTabView.swift:
```
//
//  FitnessTabView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import SwiftUI

struct FitnessTabView: View {
    @State var selectedTab = "Home"
    @AppStorage("username") var username: String?
    @State var showTerms: Bool = true
    
    init() {
        let appearance = UITabBarAppearance()
        appearance.configureWithOpaqueBackground()
        
        let normalAttributes: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.gray]
        let selectedAttributes: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.green]
        
        appearance.stackedLayoutAppearance.normal.iconColor = .gray
        appearance.stackedLayoutAppearance.normal.titleTextAttributes = normalAttributes
        
        appearance.stackedLayoutAppearance.selected.iconColor = .green
        appearance.stackedLayoutAppearance.selected.titleTextAttributes = selectedAttributes
        
        UITabBar.appearance().scrollEdgeAppearance = appearance
        UITabBar.appearance().standardAppearance = appearance
        UITabBar.appearance().tintColor = .green 
    }
    
    var body: some View {
        TabView(selection: $selectedTab) {
            HomeView()
                .tag("Home")
                .tabItem {
                    Image(systemName: "house")
                    Text("Home")
                }
            
            ChartsView()
                .tag("Charts")
                .tabItem {
                    Image(systemName: "chart.line.uptrend.xyaxis")
                    Text("Charts")
                }
            
            LeaderboardView(showTerms: $showTerms)
                .tag("Leaderboard")
                .tabItem {
                    Image(systemName: "trophy")
                    Text("Leaderboard")
                }
            
            ProfileView(showTerms: $showTerms)
                .tag("Profile")
                .tabItem {
                    Image(systemName: "person.fill")
                    Text("Profile")
                }
        }
        .onAppear {
            if username == nil {
                print("username: nil")
            } else {
                print("username: \(username!)")
            }
            showTerms = username == nil
        }
    }
}

#Preview {
    FitnessTabView()
}

```

Contents of FitnessApp/Home/ViewModel/HomeViewModel.swift:
```
//
//  HomeViewModel.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import Foundation

class HomeViewModel: ObservableObject {
    @Published var calories: Int = 0
    @Published var exercise: Int = 0
    @Published var stand: Int = 0
    
    @Published var activities = [Activity]()
    
    @Published var workouts = [
        Workout(
            title: "Running",
            image: "figure.run",
            tintColor: .green,
            duration: "47 mins",
            date: "Aug 19",
            calories: "502 kcal"
        ),
        
        Workout(
            title: "Strength Training",
            image: "figure.run",
            tintColor: .cyan,
            duration: "51 mins",
            date: "Aug 11",
            calories: "512 kcal"
        ),
        
        Workout(
            title: "Walk",
            image: "figure.walk",
            tintColor: .pink,
            duration: "60 mins",
            date: "Aug 3",
            calories: "211 kcal"
        ),
        
        Workout(
            title: "Running",
            image: "figure.run",
            tintColor: .yellow,
            duration: "60 mins",
            date: "Aug 1",
            calories: "712 kcal"
        )
    ]
    
    let healthManager = HealthManager.shared
    
    
    init() {
        Task {
            do {
                try await healthManager.reguestHealthKitAccess()
                
                fetchTodayCalories()
                fetchTodayExerciseTime()
                fetchTodayStandHours()
                fetchTodaySteps()
                fetchCurrentWeekActivities()
                fetchRecentWorkouts()
                
            } catch {
                print(error.localizedDescription)
            }
        }
    }
    
    func fetchTodayCalories() {
        healthManager.fetchTodayCaloriesBurned { result in
            switch result {
            case .failure(let error):
                print(error.localizedDescription)
            case .success(let calories):
                DispatchQueue.main.async {
                    self.calories = Int(calories)
                    let activity = Activity(title: "Calories Burned", subtitle: "today", image: "flame.fill", tintColor: .red, amount: calories.formattedNumberString())
                    self.activities.append(activity)
                }
            }
        }
    }
    
    func fetchTodayExerciseTime() {
        healthManager.fetchTodayExerciseTime { result in
            switch result {
            case .failure(let error):
                print(error.localizedDescription)
            case .success(let exercise):
                DispatchQueue.main.async {
                    self.exercise = Int(exercise)
                }
            }
        }
    }
    
    func fetchTodayStandHours() {
        healthManager.fetchTodayStandHours { result in
            switch result {
            case .failure(let error):
                print(error.localizedDescription)
            case .success(let hours):
                DispatchQueue.main.async {
                    self.stand = hours
                }
            }
        }
    }
    
    // MARK: Fitness Activity
    func fetchTodaySteps() {
        healthManager.fetchTodaySteps { result in
            switch result {
            case .failure(let error):
                print(error.localizedDescription)
            case .success(let activity):
                DispatchQueue.main.async {
                    self.activities.append(activity)
                }
            }
        }
    }
    
    func fetchCurrentWeekActivities() {
        healthManager.fetchCurrentWeekWorkoutStats { result in
            switch result {
            case .failure(let error):
                print(error.localizedDescription)
            case .success(let activities):
                DispatchQueue.main.async {
                    self.activities.append(contentsOf: activities)
                }
            }
        }
    }
    
    func fetchRecentWorkouts() {
        healthManager.fetchWorkoutsForMonth(month: Date()) { result in
            switch result {
            case .failure(let error):
                print(error.localizedDescription)
            case .success(let workouts):
                DispatchQueue.main.async {
                    self.workouts = Array(workouts.prefix(4))
                }
            }
        }
    }
}

```

Contents of FitnessApp/Home/Model/Workout.swift:
```
//
//  Workout.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import Foundation
import SwiftUI

struct Workout: Identifiable {
    let id = UUID()
    let title: String
    let image: String
    let tintColor: Color
    let duration: String
    let date: String
    let calories: String
}

extension Workout {
    static var mockWorkouts: [Workout] = [
        Workout(
            title: "Running",
            image: "figure.run",
            tintColor: .green,
            duration: "47 mins",
            date: "Aug 19",
            calories: "502 kcal"
        ),
        
        Workout(
            title: "Strength Training",
            image: "figure.run",
            tintColor: .cyan,
            duration: "51 mins",
            date: "Aug 11",
            calories: "512 kcal"
        ),
        
        Workout(
            title: "Walk",
            image: "figure.walk",
            tintColor: .pink,
            duration: "60 mins",
            date: "Aug 3",
            calories: "211 kcal"
        ),
        
        Workout(
            title: "Running",
            image: "figure.run",
            tintColor: .yellow,
            duration: "60 mins",
            date: "Aug 1",
            calories: "712 kcal"
        )
    ]
}

```

Contents of FitnessApp/Home/Model/Activity.swift:
```
//
//  Activity.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import Foundation
import SwiftUI

struct Activity: Identifiable {
    let id = UUID()
    let title: String
    let subtitle: String
    let image: String
    let tintColor: Color
    let amount: String
}

extension Activity {
    static var mockActivities: [Activity] = [
        Activity(
            title: "Today steps",
            subtitle: "Goal 12,000",
            image: "figure.run",
            tintColor: .green,
            amount: "6,123"
        ),
        
        Activity(
            title: "Today",
            subtitle: "Goal 1,000",
            image: "figure.walk",
            tintColor: .red,
            amount: "812"
        ),
        
        Activity(
            title: "Today steps",
            subtitle: "Goal 12,000",
            image: "figure.walk",
            tintColor: .blue,
            amount: "6,123"
        ),
        
        Activity(
            title: "Today steps",
            subtitle: "Goal 50,000",
            image: "figure.run",
            tintColor: .purple,
            amount: "55,812"
        )

    ]
}

```

Contents of FitnessApp/Home/View/HomeView.swift:
```
//
//  HomeView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import SwiftUI

struct HomeView: View {
    @StateObject var vm = HomeViewModel()
    
    var body: some View {
        NavigationStack {
            ScrollView(showsIndicators: false) {
                VStack (alignment: .leading) {
                    HStack {
                        ZStack {
                            ProgressCircleView(progress: $vm.calories, goal: 460, color: .pink)
                            
                            ProgressCircleView(progress: $vm.exercise, goal: 60, color: .green)
                                .padding(20)
                            
                            ProgressCircleView(progress: $vm.stand, goal: 12, color: .mint)
                                .padding(40)
                        }
                        .frame(width: 220, height: 220)
                        .shadow(radius: 5, x: 3, y: 3)
                        .padding(.horizontal)
                        
                        Spacer()
                        
                        VStack(alignment: .leading) {
                            VStack(alignment: .leading, spacing: 2) {
                                Text("Подвижность")
                                    .font(.callout)
                                
                                    .bold()
                                    .foregroundStyle(.pink)
                                
                                HStack {
                                    Text("\(vm.calories)")
                                        .bold()
                                        .font(.title)
                                        .fontDesign(.rounded)
                                    Text("ккал.")
                                        .bold()
                                        .font(.callout)
                                        .fontDesign(.rounded)
                                }
                            }
                            .padding(.bottom)

                            VStack(alignment: .leading, spacing: 2) {
                                Text("Упражнения")
                                    .font(.callout)
                                    .bold()
                                    .foregroundStyle(.green)
                                
                                HStack {
                                    Text("\(vm.exercise)")
                                        .bold()
                                        .font(.title)
                                        .fontDesign(.rounded)
                                    Text("мин.")
                                        .bold()
                                        .font(.callout)
                                        .fontDesign(.rounded)
                                }
                            }
                            .padding(.bottom)
                            
                            
                            VStack(alignment: .leading, spacing: 2) {
                                Text("Стоя")
                                    .font(.callout)
                                    .bold()
                                    .foregroundStyle(.mint)
                                
                                HStack {
                                    Text("\(vm.stand)")
                                        .bold()
                                        .font(.title)
                                        .fontDesign(.rounded)
                                    Text("ч.")
                                        .bold()
                                        .font(.callout)
                                        .fontDesign(.rounded)
                                }
                            }
                            .padding(.bottom)
                            
                        }
                        .padding(.leading, 5)
                        
                        Spacer()
                    }
                    .padding(.trailing)
                    
                    if !vm.activities.isEmpty {
                        LazyVGrid(columns: Array(repeating: GridItem(spacing:10), count: 2)) {
                            
                            Section {
                                ForEach(vm.activities, id: \.id) { activity in
                                    ActivityCardView(activity: activity)
                                }
                            } header: {
                                HStack {
                                    Text("Фитнес активность")
                                        .font(.title2)
                                    
                                    Spacer()
                                    
//                                    NavigationLink {
//                                        EmptyView()
//                                    } label: {
//                                        Text("Show More")
//                                    }
//                                    .buttonStyle(.bordered)
//                                    .tint(.green)
                                }
                                .padding(.vertical)
                            }
                        }
                        .padding(.horizontal)
                        .padding(.top)
                    }
                    
                    LazyVStack {
                        Section {
                            ForEach(vm.workouts, id: \.id) { workout in
                                WorkoutCardView(workout: workout)
                            }
                        } header: {
                            HStack {
                                Text("Последние тренировки")
                                    .font(.title2)
                                
                                Spacer()
                                
//                                NavigationLink {
//                                    EmptyView()
//                                } label: {
//                                    Text("Show More")
//                                }
//                                .buttonStyle(.bordered)
//                                .tint(.green)
                            }
                            .padding(.vertical)
                        }
                    }
                    .padding(.horizontal)
                    .padding(.top)
                }
            }
            .navigationTitle("Главная")
        }
    }
}

#Preview {
    HomeView()
}

```

Contents of FitnessApp/Home/View/SubView/ActivityCardView.swift:
```
//
//  ActivityCardView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import SwiftUI

struct ActivityCardView: View {
    @State var activity: Activity
    
    var body: some View {
        ZStack {
            Color(uiColor: .systemGray6)
                .cornerRadius(15)
            
            VStack (spacing: 8) {
                Label(activity.title, systemImage: activity.image)
                    .foregroundStyle(activity.tintColor)
                    .bold()
                
                Text(activity.subtitle)
                    .font(.caption)
                
                Text(activity.amount)
                    .font(.system(.title, design: .rounded))
                    .bold()
                    .padding(.top, 10)
            }
            .padding()
        }
    }
}

#Preview {
    ActivityCardView(
        activity: Activity(
            title: "Today steps",
            subtitle: "Goal 12,000",
            image: "figure.walk",
            tintColor: .green,
            amount: "6,123"
        )
    )
}

```

Contents of FitnessApp/Home/View/SubView/ProgressCircleView.swift:
```
//
//  ProgressCircleView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import SwiftUI

struct ProgressCircleView: View {
    @Binding var progress: Int
    var goal: Int
    var color: Color
    private let width: CGFloat = 20
    
    var body: some View {
        ZStack {
            Circle()
                .stroke(color.opacity(0.3), lineWidth: width)
            
            Circle()
                .rotation(.degrees(-90))
                .trim(from: 0, to: CGFloat(progress) / CGFloat(goal))
                .stroke(color, style: StrokeStyle(lineWidth: width, lineCap: .round))
                .shadow(radius: 5)
        }
        .padding()
    }
}

#Preview {
    ProgressCircleView(progress: .constant(60), goal: 200, color: .red)
}

```

Contents of FitnessApp/Home/View/SubView/WorkoutCardView.swift:
```
//
//  WorkoutCardView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import SwiftUI

struct WorkoutCardView: View {
    @State var workout: Workout
    
    var body: some View {
        HStack {
            Image(systemName: workout.image)
                .resizable()
                .scaledToFit()
                .frame(width: 48, height: 48)
                .foregroundStyle(workout.tintColor)
                .padding()
                .background(.gray.opacity(0.2))
                .cornerRadius(15)
            
            VStack (alignment: .leading, spacing: 16) {
                HStack {
                    Text(workout.title)
                        .font(.title3)
                        .bold()
                }
                
                HStack {
                    Label(workout.duration, systemImage: "clock")
                        .font(.caption)
                    
                    Spacer()
                    
                    Label(workout.calories, systemImage: "flame.fill")
                        .font(.caption)
                    Spacer()
                    
                    Label(workout.date, systemImage: "calendar")
                        .font(.caption)                }
            }
            .padding()
        }
    }
}

#Preview {
    WorkoutCardView(
        workout: Workout(
            title: "Running",
            image: "figure.run",
            tintColor: .green,
            duration: "47 mins",
            date: "3 aug",
            calories: "181 kcal"
        )
    )
}

```

Contents of FitnessApp/Managers/HealthManager.swift:
```
//
//  HealthManager.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 1/20/25.
//

import Foundation
import HealthKit

class HealthManager {
    
    static let shared = HealthManager()
    
    let store = HKHealthStore()
    
    private init() {
        Task {
            do {
                try await reguestHealthKitAccess()
            } catch {
                print(error.localizedDescription)
            }
        }
    }
    
    func reguestHealthKitAccess() async throws {
        let calories = HKQuantityType(.activeEnergyBurned)
        let exercise = HKQuantityType(.appleExerciseTime)
        let stand = HKCategoryType(.appleStandHour)
        let steps = HKQuantityType(.stepCount)
        let workout = HKSampleType.workoutType()
        
        let healthTypes: Set = [calories, exercise, stand, steps, workout]
        
        try await store.requestAuthorization(toShare: [], read: healthTypes)
    }
    
    func fetchTodayCaloriesBurned(completion: @escaping (Result<Double, Error>) -> Void) {
        let calories = HKQuantityType(.activeEnergyBurned)
        let predicate = HKQuery.predicateForSamples(withStart: .startOfDay, end: Date())
        let query = HKStatisticsQuery(quantityType: calories, quantitySamplePredicate: predicate) { _, results, error in
            guard let quantity = results?.sumQuantity(), error == nil else {
                completion(.failure(URLError(.badURL)))
                return
            }
            
            let calorieCount = quantity.doubleValue(for: .kilocalorie())
            completion(.success(calorieCount))
        }
        
        store.execute(query)
    }
    
    func fetchTodayExerciseTime(completion: @escaping (Result<Double, Error>) -> Void) {
        let exercise = HKQuantityType(.appleExerciseTime)
        let predicate = HKQuery.predicateForSamples(withStart: .startOfDay, end: Date())
        let query = HKStatisticsQuery(quantityType: exercise, quantitySamplePredicate: predicate) { _, results, error in
            guard let quantity = results?.sumQuantity(), error == nil else {
                completion(.failure(URLError(.badURL)))
                return
            }
            
            let exetciseTime = quantity.doubleValue(for: .minute())
            completion(.success(exetciseTime))
        }
        
        store.execute(query)
    }
    
    func fetchTodayStandHours(completion: @escaping (Result<Int, Error>) -> Void) {
        let stand = HKCategoryType(.appleStandHour)
        let predicate = HKQuery.predicateForSamples(withStart: .startOfDay, end: Date())
        let query = HKSampleQuery(sampleType: stand, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { _, results, error in
            guard let samples = results as? [HKCategorySample], error == nil else {
                completion(.failure(URLError(.badURL)))
                return
            }
            
            let standCount = samples.filter({ $0.value == 0 }).count
            completion(.success(standCount))
        }
        
        store.execute(query)
    }
    
    // MARK: Fitness Activity
    func fetchTodaySteps(completion: @escaping (Result<Activity, Error>) -> Void) {
        let steps = HKQuantityType(.stepCount)
        let predicate = HKQuery.predicateForSamples(withStart: .startOfDay, end: Date())
        let query = HKStatisticsQuery(quantityType: steps, quantitySamplePredicate: predicate) { _, results, error in
            guard let quantity = results?.sumQuantity(), error == nil else {
                completion(.failure(URLError(.badURL)))
                return
            }
            
            let steps = quantity.doubleValue(for: .count())
            let activity = Activity(title: "Today Steps", subtitle: "Goal: 10000", image: "figure.walk", tintColor: .green, amount: steps.formattedNumberString())
            completion(.success(activity))
        }
        
        store.execute(query)
    }
    
    func fetchCurrentWeekWorkoutStats(completion: @escaping (Result<[Activity], Error>) -> Void) {
        let workout = HKSampleType.workoutType()
        let predicate = HKQuery.predicateForSamples(withStart: .startOfWeek, end: Date())
        let query = HKSampleQuery(sampleType: workout, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { [weak self] _, results, error in
            guard let workouts = results as? [HKWorkout], error == nil, let self = self else {
                completion(.failure(URLError(.badURL)))
                return
            }
            
            var runningCount: Int = 0
            var strengthCount: Int = 0
            var soccerCount: Int = 0
            var basketballCount: Int = 0
            var stairsCount: Int = 0
            var walkingCount: Int = 0
            
            for workout in workouts {
                
                let duration = Int(workout.duration) / 60
                
                if workout.workoutActivityType == .running {
                    runningCount += duration
                } else if workout.workoutActivityType == .traditionalStrengthTraining {
                    strengthCount += duration
                } else if workout.workoutActivityType == .soccer {
                    soccerCount += duration
                } else if workout.workoutActivityType == .basketball {
                    basketballCount += duration
                } else if workout.workoutActivityType == .stairs {
                    stairsCount += duration
                } else if workout.workoutActivityType == .walking {
                    walkingCount += duration
                }
            }
            
            let activities = generateActivitiesFromDurations(running: runningCount, strenth: strengthCount, soccer: soccerCount, basketball: basketballCount, stairs: stairsCount, walking: walkingCount)
            completion(.success(activities))
        }
        
        store.execute(query)
    }
    
    func generateActivitiesFromDurations(running: Int, strenth: Int, soccer: Int, basketball: Int, stairs: Int, walking: Int) -> [Activity] {
        return [
            Activity(title: "Ходьба", subtitle: "На этой неделе", image: "figure.walk", tintColor: .green, amount: "\(walking) мин"),
            Activity(title: "Бег", subtitle: "На этой неделе", image: "figure.run", tintColor: .teal, amount: "\(running) мин"),
            Activity(title: "Силовые", subtitle: "На этой неделе", image: "dumbbell", tintColor: .blue, amount: "\(strenth) мин"),
            Activity(title: "Футбол", subtitle: "На этой неделе", image: "figure.soccer", tintColor: .indigo, amount: "\(soccer) мин"),
            Activity(title: "Баскетбол", subtitle: "На этой неделе", image: "figure.basketball", tintColor: .purple, amount: "\(basketball) мин"),
            Activity(title: "Лестница", subtitle: "На этой неделе", image: "figure.stairs", tintColor: .yellow, amount: "\(stairs) мин"),
        ]
    }
    
    //MARK: Recent Workouts
    func fetchWorkoutsForMonth(month: Date, completion: @escaping (Result<[Workout], Error>) -> Void) {
        let workout = HKSampleType.workoutType()
        let (startDate, endDate) = month.fetchMonthStartAndEndDate()
        let predicate = HKQuery.predicateForSamples(withStart: startDate, end: endDate)
        let sortDiscriptor = NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: false)
        
        let query = HKSampleQuery(sampleType: workout, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: [sortDiscriptor]) { _, results, error in
            guard let workouts = results as? [HKWorkout], error == nil else {
                completion(.failure(URLError(.badURL)))
                return
            }
            
            let workoutsArray = workouts.map({ Workout(title: $0.workoutActivityType.name, image: $0.workoutActivityType.image, tintColor: $0.workoutActivityType.color, duration: "\(Int($0.duration)/60) mins", date: $0.startDate.formatWorkoutDate(), calories: $0.totalEnergyBurned?.doubleValue(for: .kilocalorie()).formattedNumberString() ?? "-") })
            
            completion(.success(workoutsArray))
        }
        
        store.execute(query)
    }
}

//MARK: ChartsView Data
extension HealthManager {
    struct YearChartDataResult {
        let ytd: [MonthlyStepModel]
        let oneYear: [MonthlyStepModel]
    }
    
    struct ThreeMonthChartDataResult {
        let oneWeek: [DailyStepModel]
        let oneMonth: [DailyStepModel]
        let threeMonths: [DailyStepModel]
    }
    
    func fetchYTDAndOneYearData(completion: @escaping (Result<YearChartDataResult, Error>) -> Void ) {
        let steps = HKQuantityType(.stepCount)
        let calendar = Calendar.current
        
        var oneYearMonth = [MonthlyStepModel]()
        var ytdMonth = [MonthlyStepModel]()
        
        for i in 0...11 {
            let month = calendar.date(byAdding: .month, value: -i, to: Date()) ?? Date()
            
            let (startOfMonth, endOfMonth) = month.fetchMonthStartAndEndDate()
            let predicate = HKQuery.predicateForSamples(withStart: startOfMonth, end: endOfMonth)
            
            let query = HKStatisticsQuery(quantityType: steps, quantitySamplePredicate: predicate) { _, results, error in
                guard let count = results?.sumQuantity()?.doubleValue(for: .count() ), error == nil else {
                    completion(.failure(URLError(.badURL)))
                    return
                }
                
                if i == 0 {
                    oneYearMonth.append(MonthlyStepModel(date: month, count: Int(count)))
                    ytdMonth.append(MonthlyStepModel(date: month, count: Int(count)))
                } else {
                    oneYearMonth.append(MonthlyStepModel(date: month, count: Int(count)))
                    
                    if calendar.component(.year, from: Date()) == calendar.component(.year, from: month) {
                        ytdMonth.append(MonthlyStepModel(date: month, count: Int(count)))
                    }
                }
                
                if i == 11 {
                    completion(.success(YearChartDataResult(ytd: ytdMonth, oneYear: oneYearMonth)) )
                }
            }
            
            store.execute(query)
        }
    }

    func fetchThreeMonthStepData(completion: @escaping (Result<ThreeMonthChartDataResult, Error>) -> Void) {
        let steps = HKQuantityType(.stepCount)
        let calendar = Calendar.current

        var weekSteps = [DailyStepModel]()
        var monthSteps = [DailyStepModel]()
        var threeMonthSteps = [DailyStepModel]()

        let now = Date()
        
        for i in 0..<90 {
            guard let day = calendar.date(byAdding: .day, value: -i, to: now) else { continue }
            let startOfDay = calendar.startOfDay(for: day)
            let endOfDay = calendar.date(byAdding: .day, value: 1, to: startOfDay) ?? startOfDay

            let predicate = HKQuery.predicateForSamples(withStart: startOfDay, end: endOfDay)
            
            let query = HKStatisticsQuery(quantityType: steps, quantitySamplePredicate: predicate) { _, results, error in
                guard let count = results?.sumQuantity()?.doubleValue(for: .count()), error == nil else {
                    completion(.failure(URLError(.badURL)))
                    return
                }

                let stepModel = DailyStepModel(date: startOfDay, count: Int(count))
                
                if i < 7 {
                    weekSteps.append(stepModel)
                }
                if i < 30 {
                    monthSteps.append(stepModel)
                }
                threeMonthSteps.append(stepModel)

                if i == 89 {
                    completion(.success(ThreeMonthChartDataResult(oneWeek: weekSteps, oneMonth: monthSteps, threeMonths: threeMonthSteps)))
                }
            }
            
            store.execute(query)
        }
    }
}

//MARK: Leaderboard View
extension HealthManager {
    func fetchCurrentWeekStepCount(completion: @escaping (Result<Double, Error>) -> Void) {
        let steps = HKQuantityType(.stepCount)
        let predicate = HKQuery.predicateForSamples(withStart: .startOfWeek, end: Date())
        let query = HKStatisticsQuery(quantityType: steps, quantitySamplePredicate: predicate) { _, results, error in
            guard let quantity = results?.sumQuantity(), error == nil else {
                completion(.failure(URLError(.badURL)))
                return
            }
            
            let steps = quantity.doubleValue(for: .count())
             
            completion(.success(steps))
        }
        
        store.execute(query)
    }
}

```

Contents of FitnessApp/Managers/DatabaseManager.swift:
```
//
//  DatabaseManager.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/10/25.
//

import Foundation
import FirebaseFirestore

class DatabaseManager {
    static let shared = DatabaseManager()
    
    private init() {}
    
    private let database = Firestore.firestore()
    let weeklyLeaderboard = "\(Date().mondayDateFormat())-leaderboard"
    
    //MARK: Fetch Leaderboards
    func fetchLeaderboards() async throws -> [LeaderboardUser] {
        let snapshot = try await database.collection(weeklyLeaderboard).getDocuments()
        return try snapshot.documents.compactMap({ try $0.data(as: LeaderboardUser.self)})
    }
    
    //MARK: Post (Update) Leaderboards for current User
    func postStepCountUpdate(leader: LeaderboardUser) async throws {
        let data = try Firestore.Encoder().encode(leader)
        try await database.collection(weeklyLeaderboard).document(leader.username).setData(data, merge: false)
    }
    
    //MARK: Update current Username
    func updateUsername(oldUsername: String, newUsername: String) async throws {
        let document = try await database.collection(weeklyLeaderboard).document(oldUsername).getDocument()
        try await database.collection(weeklyLeaderboard).document(newUsername).setData(document.data()!, merge: false)
        try await database.collection(weeklyLeaderboard).document(oldUsername).delete()
    }
}


//MARK: Generate 10 random users in FB
extension DatabaseManager {
    func createRandomUsers() async throws {
        let usersCollection = database.collection(weeklyLeaderboard)
        
        let usernames = ["aiX", "jason dubbon", "sean allen", "lev", "hacking with swift", "max", "olga", "daniel", "elena", "sergey"]
        
        for username in usernames {
            let randomSteps = Int.random(in: 5000...20000)
            let user = LeaderboardUser(username: username, count: randomSteps)
            
            let data = try Firestore.Encoder().encode(user)
            try await usersCollection.document(username).setData(data, merge: false)
        }
        
        print("10 случайных пользователей добавлены в Firestore")
    }
}

```

Contents of FitnessApp/Assets.xcassets/Contents.json:
```
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

```

Contents of FitnessApp/Assets.xcassets/AppIcon.appiconset/Contents.json:
```
{
  "images" : [
    {
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    },
    {
      "appearances" : [
        {
          "appearance" : "luminosity",
          "value" : "dark"
        }
      ],
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    },
    {
      "appearances" : [
        {
          "appearance" : "luminosity",
          "value" : "tinted"
        }
      ],
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

```

Contents of FitnessApp/Assets.xcassets/AccentColor.colorset/Contents.json:
```
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0xFF",
          "green" : "0xFF",
          "red" : "0xFF"
        }
      },
      "idiom" : "universal"
    },
    {
      "appearances" : [
        {
          "appearance" : "luminosity",
          "value" : "dark"
        }
      ],
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0x00",
          "green" : "0x00",
          "red" : "0x00"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

```

Contents of FitnessApp/Charts/ViewModel/ChartsViewModel.swift:
```
//
//  ChartsViewModel.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/9/25.
//

import Foundation

class ChartsViewModel: ObservableObject {
    var mockChartData = DailyStepModel.generate(forDays: 7)
    var mockOneMonthChartData = DailyStepModel.generate(forDays: 30)
    var mockThreeMonthsChartData = DailyStepModel.generate(forDays: 90)
    var mockYTDChartData = MonthlyStepModel.generate(forMonth: 4)
    var mockOneYearChartData = MonthlyStepModel.generate(forMonth: 12)
    
    @Published var oneWeekChartData = [DailyStepModel]()
    @Published var oneWeekAverage = 0
    @Published var oneWeekTotal = 0
    
    @Published var oneMonthChartData = [DailyStepModel]()
    @Published var oneMonthAverage = 0
    @Published var oneMonthTotal = 0
    
    @Published var threeMonthChartData = [DailyStepModel]()
    @Published var threeMonthAverage = 0
    @Published var threeMonthTotal = 0
    
    @Published var ytdChartData = [MonthlyStepModel]()
    @Published var ytdAverage = 0
    @Published var ytdTotal = 0
    
    @Published var oneYearChartData = [MonthlyStepModel]()
    @Published var oneYearAverage = 0
    @Published var oneYearTotal = 0
    
    let healthManager = HealthManager.shared
    
    init() {
        fetchYTDAndOneYearData()
        fetchThreeMonthData()
    }
    
    @Published var selectedChart: ChartOptions = .oneWeek
    
    func fetchYTDAndOneYearData() {
        healthManager.fetchYTDAndOneYearData { result in
            switch result {
            case .success(let result):
                DispatchQueue.main.async {
                    self.ytdChartData = result.ytd
                    self.oneYearChartData = result.oneYear
                    
                    self.ytdTotal = self.ytdChartData.reduce(0) { $0 + $1.count }
                    self.oneYearTotal = self.oneYearChartData.reduce(0) { $0 + $1.count }
                    
                    self.ytdAverage = self.ytdTotal / Calendar.current.component(.month, from: Date())
                    self.oneYearAverage = self.oneYearTotal / 12
                }
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
    }
    
    func fetchThreeMonthData() {
        healthManager.fetchThreeMonthStepData { result in
            switch result {
            case .success(let result):
                DispatchQueue.main.async {
                    self.oneWeekChartData = result.oneWeek
                    self.oneMonthChartData = result.oneMonth
                    self.threeMonthChartData = result.threeMonths
                    
                    self.oneWeekTotal = self.oneWeekChartData.reduce(0) { $0 + $1.count }
                    self.oneMonthTotal = self.oneMonthChartData.reduce(0) { $0 + $1.count }
                    self.threeMonthTotal = self.threeMonthChartData.reduce(0) { $0 + $1.count }
                    
                    self.oneWeekAverage = self.oneWeekTotal / 7
                    self.oneMonthAverage = self.oneMonthTotal / 30
                    self.threeMonthAverage = self.threeMonthTotal / 90
                }
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
    }
}

```

Contents of FitnessApp/Charts/Model/ChartOptions.swift:
```
//
//  ChartOptions.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/9/25.
//

import Foundation

enum ChartOptions: String, CaseIterable {
    case oneWeek = "1Н"
    case oneMonth = "1М"
    case threeMonths = "3M"
    case yearToDate = "В этом году"
    case oneYear = "1Г"
}

```

Contents of FitnessApp/Charts/Model/Step.swift:
```
//
//  DailyStepModel.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/9/25.
//

import Foundation

protocol Step: Identifiable {
    var id: UUID { get }
    var date: Date { get set }
    var count: Int { get set }
}

struct MonthlyStepModel: Step {
    var id: UUID = UUID()
    var date: Date
    var count: Int
}

struct DailyStepModel: Step {
    var id: UUID = UUID()
    var date: Date
    var count: Int
}

extension MonthlyStepModel {
    static func generate(forMonth months: Int) -> [MonthlyStepModel] {
        let calendar = Calendar.current
        return (0..<months).map { i in
            let date = calendar.date(byAdding: .month, value: -i, to: Date()) ?? Date()
            return MonthlyStepModel (date: date, count: Int.random(in: 2000...15000))
        }
    }
}

extension DailyStepModel {
    static func generate(forDays days: Int) -> [DailyStepModel] {
        let calendar = Calendar.current
        return (0..<days).map { i in
            let date = calendar.date(byAdding: .day, value: -i, to: Date()) ?? Date()
            return DailyStepModel (date: date, count: Int.random(in: 2000...15000))
        }
    }
}

```

Contents of FitnessApp/Charts/View/ChartDataView.swift:
```
//
//  ChartDataView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/9/25.
//

import SwiftUI
import Charts

struct ChartDataView: View {
    @State var chartData: ChartData
    @State private var rawSelectedDate: Date?
    
    var selectedStep: (any Step)? {
        guard let rawSelectedDate else { return nil }
        
        return chartData.data.first(where: { step in
            Calendar.current.isDate(step.date, equalTo: rawSelectedDate, toGranularity: chartData.unit)
        })
    }
    
    var body: some View {
        VStack {
            HStack {
                Spacer()
                
                VStack(spacing: 16) {
                    Text("Среднее")
                        .font(.title2)
                    
                    Text("\(chartData.average)")
                        .font(.title3)
                }
                .foregroundStyle(.white)
                .frame(width: 90, height: 65)
                .padding()
                .background(.gray.opacity(0.15))
                .cornerRadius(15)
                .frame(width: 90, height: 65)
                
                Spacer()
                
                VStack(spacing: 16) {
                    Text("Всего")
                        .font(.title2)
                    
                    Text("\(chartData.total)")
                        .font(.title3)
                }
                .foregroundStyle(.white)
                .frame(width: 90, height: 65)
                .padding()
                .background(.gray.opacity(0.15))
                .cornerRadius(15)
                
                
                Spacer()
            }
            .opacity(rawSelectedDate == nil ? 1 : 0)
            
            Chart {
                if let selectedStep {
                    RuleMark(x: .value("Selected Date", selectedStep.date, unit: chartData.unit))
                        .foregroundStyle(.green.opacity(0.3))
                        .annotation(position: .top,  overflowResolution: .init(x: .fit(to: .plot), y: .disabled)) {
                            VStack(spacing: 10) {
                                Text("\(Date.formattedDate(from: selectedStep.date, unit: chartData.unit))")
                                    .font(.title2)
                                    .contentTransition(.symbolEffect)
                                
                                Text("\(selectedStep.count)")
                                    .font(.system(size: 30, weight: .bold, design: .rounded))
                                    .contentTransition(.numericText())
                            }
                            .foregroundStyle(.white)
                            .padding(12)
                            .frame(width: 200, height: 105)
                            .background(RoundedRectangle(cornerRadius: 12)
                                .fill(.green.gradient)
                            )
                        }
                }
                
                ForEach(chartData.data, id: \.id) { data  in
                    BarMark(x: .value(data.date.formatted(), data.date, unit: chartData.unit), y: .value("Steps", data.count ))
                        .foregroundStyle(.green)
                        .opacity(rawSelectedDate == nil || data.date == selectedStep?.date ? 0.9 : 0.3)
                }
                
                RuleMark(y: .value("AVG", chartData.average))
                    .lineStyle(StrokeStyle(lineWidth: 2, dash: [5]))
                    .annotation {
                        Text("Среднее")
                            .font(.system(size: 18, weight: .regular, design: .rounded))
                            .foregroundStyle(.white)
                            .font(.caption)
                            .padding(5)
                            .background(.gray)
                            .cornerRadius(10)
                    }
                    .foregroundStyle(.gray)
            }
            .chartXSelection(value: $rawSelectedDate.animation(.easeInOut))
        }
    }
}

#Preview {
    ChartDataView(chartData: ChartData(data: DailyStepModel.generate(forDays: 30), average: 10000, total: 100000, unit: .day))
}

```

Contents of FitnessApp/Charts/View/ChartsView.swift:
```
//
//  ChartsView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/9/25.
//

import SwiftUI
import Charts

struct ChartData {
    let data: [any Step]
    let average: Int
    let total: Int
    let unit: Calendar.Component
}

struct ChartsView: View {
    @StateObject var vm = ChartsViewModel()
    
    var body: some View {
        NavigationStack {
            VStack {
                ZStack {
                    switch vm.selectedChart {
                    case .oneWeek:
                        ChartDataView(chartData: ChartData(data: vm.oneWeekChartData, average: vm.oneWeekAverage, total: vm.oneWeekTotal, unit: .day))
                    case .oneMonth:
                        ChartDataView(chartData: ChartData(data: vm.oneMonthChartData, average: vm.oneMonthAverage, total: vm.oneMonthTotal, unit: .day))
                    case .threeMonths:
                        ChartDataView(chartData: ChartData(data: vm.threeMonthChartData, average: vm.threeMonthAverage, total: vm.threeMonthTotal, unit: .day))
                    case .yearToDate:
                        ChartDataView(chartData: ChartData(data: vm.ytdChartData, average: vm.ytdAverage, total: vm.ytdTotal, unit: .month))
                    case .oneYear:
                        ChartDataView(chartData: ChartData(data: vm.oneYearChartData, average: vm.oneYearAverage, total: vm.oneYearTotal, unit: .month))
                    }
                }
                .frame(height: 450)
                .foregroundStyle(.green)
                .padding(.horizontal)
                
                HStack {
                    ForEach(ChartOptions.allCases, id: \.rawValue) { option in
                        Button(option.rawValue) {
                            withAnimation(.easeInOut) {
                                vm.selectedChart = option
                            }
                        }
                        .buttonStyle(.bordered)
                        .tint(vm.selectedChart == option ? .green : .white)
                    }
                }
            }
            .navigationTitle("Графики")
        }
    }
}

#Preview {
    ChartsView()
}

```

Contents of FitnessApp/Utils/Double+Ext.swift:
```
//
//  Double+Ext.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/11/25.
//

import Foundation

extension Double {
    func formattedNumberString() -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.maximumFractionDigits = 0
        
        return formatter.string(from: NSNumber(value: self)) ?? "0"
    }
}

```

Contents of FitnessApp/Utils/Date+Ext.swift:
```
//
//  Date+Ext.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/11/25.
//

import Foundation

extension Date {
    static var startOfDay: Date {
        let calendar = Calendar.current
        return calendar.startOfDay(for: Date())
    }
    
    static var startOfWeek: Date {
        let calendar = Calendar.current
        var components = calendar.dateComponents([.yearForWeekOfYear, .weekOfYear], from: Date())
        components.weekday = 2
        return calendar.date(from: components) ?? Date()
    }
    
    func fetchMonthStartAndEndDate() -> (Date, Date) {
        let calendar = Calendar.current
        let startDateComponent = calendar.dateComponents([.year, .month], from: calendar.startOfDay(for: self))
        let startDate = calendar.date(from: startDateComponent) ?? self
        
        let endDate = calendar.date(byAdding: DateComponents(month: 1, day: -1), to: startDate) ?? self
        return (startDate, endDate)
    }
    
    func formatWorkoutDate() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "MMM d"
        return formatter.string(from: self)
    }
    
    func mondayDateFormat() -> String {
        let monday = Date.startOfWeek
        let formetter = DateFormatter()
        formetter.dateFormat = "MM-dd-yyyy"
        return formetter.string(from: monday)
    }
    
    static func formattedDate(from date: Date, unit: Calendar.Component) -> String {
        let formatter = DateFormatter()
        switch unit {
        case .day:
            formatter.dateFormat = "EEEE" // Полное название дня недели (например, "Понедельник")
        case .month:
            formatter.dateFormat = "MMMM yyyy" // Месяц и год (например, "Март 2024")
        default:
            formatter.dateFormat = "LLLL" // Название месяца (например, "Март")
        }
        return formatter.string(from: date)
    }
}

```

Contents of FitnessApp/Utils/HKWorkoutActivityType+Ext.swift:
```
//
//  HKWorkoutActivityTypeName.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 2/3/25.
//

import HealthKit
import SwiftUI

extension HKWorkoutActivityType {

    /*
     Simple mapping of available workout types to a human readable name.
     */
    var name: String {
        switch self {
        case .americanFootball:             return "American Football"
        case .archery:                      return "Archery"
        case .australianFootball:           return "Australian Football"
        case .badminton:                    return "Badminton"
        case .baseball:                     return "Baseball"
        case .basketball:                   return "Basketball"
        case .bowling:                      return "Bowling"
        case .boxing:                       return "Boxing"
        case .climbing:                     return "Climbing"
        case .crossTraining:                return "Cross Training"
        case .curling:                      return "Curling"
        case .cycling:                      return "Cycling"
        case .dance:                        return "Dance"
        case .danceInspiredTraining:        return "Dance Inspired Training"
        case .elliptical:                   return "Elliptical"
        case .equestrianSports:             return "Equestrian Sports"
        case .fencing:                      return "Fencing"
        case .fishing:                      return "Fishing"
        case .functionalStrengthTraining:   return "Functional Strength Training"
        case .golf:                         return "Golf"
        case .gymnastics:                   return "Gymnastics"
        case .handball:                     return "Handball"
        case .hiking:                       return "Hiking"
        case .hockey:                       return "Hockey"
        case .hunting:                      return "Hunting"
        case .lacrosse:                     return "Lacrosse"
        case .martialArts:                  return "Martial Arts"
        case .mindAndBody:                  return "Mind and Body"
        case .mixedMetabolicCardioTraining: return "Mixed Metabolic Cardio Training"
        case .paddleSports:                 return "Paddle Sports"
        case .play:                         return "Play"
        case .preparationAndRecovery:       return "Preparation and Recovery"
        case .racquetball:                  return "Racquetball"
        case .rowing:                       return "Rowing"
        case .rugby:                        return "Rugby"
        case .running:                      return "Running"
        case .sailing:                      return "Sailing"
        case .skatingSports:                return "Skating Sports"
        case .snowSports:                   return "Snow Sports"
        case .soccer:                       return "Soccer"
        case .softball:                     return "Softball"
        case .squash:                       return "Squash"
        case .stairClimbing:                return "Stair Climbing"
        case .surfingSports:                return "Surfing Sports"
        case .swimming:                     return "Swimming"
        case .tableTennis:                  return "Table Tennis"
        case .tennis:                       return "Tennis"
        case .trackAndField:                return "Track and Field"
        case .traditionalStrengthTraining:  return "Traditional Strength Training"
        case .volleyball:                   return "Volleyball"
        case .walking:                      return "Walking"
        case .waterFitness:                 return "Water Fitness"
        case .waterPolo:                    return "Water Polo"
        case .waterSports:                  return "Water Sports"
        case .wrestling:                    return "Wrestling"
        case .yoga:                         return "Yoga"

        // iOS 10
        case .barre:                        return "Barre"
        case .coreTraining:                 return "Core Training"
        case .crossCountrySkiing:           return "Cross Country Skiing"
        case .downhillSkiing:               return "Downhill Skiing"
        case .flexibility:                  return "Flexibility"
        case .highIntensityIntervalTraining:    return "High Intensity Interval Training"
        case .jumpRope:                     return "Jump Rope"
        case .kickboxing:                   return "Kickboxing"
        case .pilates:                      return "Pilates"
        case .snowboarding:                 return "Snowboarding"
        case .stairs:                       return "Stairs"
        case .stepTraining:                 return "Step Training"
        case .wheelchairWalkPace:           return "Wheelchair Walk Pace"
        case .wheelchairRunPace:            return "Wheelchair Run Pace"

        // iOS 11
        case .taiChi:                       return "Tai Chi"
        case .mixedCardio:                  return "Mixed Cardio"
        case .handCycling:                  return "Hand Cycling"

        // iOS 13
        case .discSports:                   return "Disc Sports"
        case .fitnessGaming:                return "Fitness Gaming"

        // Catch-all
        default:                            return "Other"
        }
    }
    
    var image: String {
           let symbolName: String
           switch self {
           case .americanFootball:             symbolName = "sportscourt"
           case .archery:                      symbolName = "archerytarget"
           case .australianFootball:           symbolName = "sportscourt"
           case .badminton:                    symbolName = "sportscourt"
           case .baseball:                     symbolName = "figure.baseball"
           case .basketball:                   symbolName = "figure.basketball"
           case .bowling:                      symbolName = "sportscourt"
           case .boxing:                       symbolName = "boxingglove"
           case .climbing:                     symbolName = "mountain"
           case .crossTraining:                symbolName = "figure.walk"
           case .curling:                      symbolName = "sportscourt"
           case .cycling:                      symbolName = "bicycle"
           case .dance:                        symbolName = "music.note"
           case .danceInspiredTraining:        symbolName = "music.note"
           case .elliptical:                   symbolName = "ellipsis.circle"
           case .equestrianSports:             symbolName = "horse"
           case .fencing:                      symbolName = "sportscourt"
           case .fishing:                      symbolName = "fish"
           case .functionalStrengthTraining:   symbolName = "figure.walk"
           case .golf:                         symbolName = "sportscourt"
           case .gymnastics:                   symbolName = "person"
           case .handball:                     symbolName = "sportscourt"
           case .hiking:                       symbolName = "map"
           case .hockey:                       symbolName = "sportscourt"
           case .hunting:                      symbolName = "cross"
           case .lacrosse:                     symbolName = "sportscourt"
           case .martialArts:                  symbolName = "sportscourt"
           case .mindAndBody:                  symbolName = "yoga"
           case .mixedMetabolicCardioTraining: symbolName = "figure.walk"
           case .paddleSports:                 symbolName = "canoe"
           case .play:                         symbolName = "gamecontroller"
           case .preparationAndRecovery:       symbolName = "wrench"
           case .racquetball:                  symbolName = "sportscourt"
           case .rowing:                       symbolName = "rowing"
           case .rugby:                        symbolName = "sportscourt"
           case .running:                      symbolName = "figure.walk"
           case .sailing:                      symbolName = "sailboat"
           case .skatingSports:                symbolName = "skating"
           case .snowSports:                   symbolName = "snow"
           case .soccer:                       symbolName = "sportscourt"
           case .softball:                     symbolName = "sportscourt"
           case .squash:                       symbolName = "sportscourt"
           case .stairClimbing:                symbolName = "figure.stairs"
           case .surfingSports:                symbolName = "sportscourt"
           case .swimming:                     symbolName = "figure.pool.swim"
           case .tableTennis:                  symbolName = "sportscourt"
           case .tennis:                       symbolName = "sportscourt"
           case .trackAndField:                symbolName = "sportscourt"
           case .traditionalStrengthTraining:  symbolName = "figure.strengthtraining.traditional"
           case .volleyball:                   symbolName = "sportscourt"
           case .walking:                      symbolName = "figure.walk"
           case .waterFitness:                 symbolName = "drop.triangle"
           case .waterPolo:                    symbolName = "sportscourt"
           case .waterSports:                  symbolName = "sportscourt"
           case .wrestling:                    symbolName = "sportscourt"
           case .yoga:                         symbolName = "lotus"

           // iOS 10
           case .barre:                        symbolName = "sportscourt"
           case .coreTraining:                 symbolName = "figure.walk"
           case .crossCountrySkiing:           symbolName = "skis"
           case .downhillSkiing:               symbolName = "skis"
           case .flexibility:                  symbolName = "sportscourt"
           case .highIntensityIntervalTraining:    symbolName = "figure.strengthtraining.traditional"
           case .jumpRope:                     symbolName = "sportscourt"
           case .kickboxing:                   symbolName = "figure.kickboxing"
           case .pilates:                      symbolName = "sportscourt"
           case .snowboarding:                 symbolName = "snow"
           case .stairs:                       symbolName = "figure.stairs"
           case .stepTraining:                 symbolName = "sportscourt"
           case .wheelchairWalkPace:           symbolName = "figure.walk"
           case .wheelchairRunPace:            symbolName = "figure.walk"

           // iOS 11
           case .taiChi:                       symbolName = "sportscourt"
           case .mixedCardio:                  symbolName = "figure.walk"
           case .handCycling:                  symbolName = "sportscourt"

           // iOS 13
           case .discSports:                   symbolName = "sportscourt"
           case .fitnessGaming:                symbolName = "sportscourt"

           // Catch-all
           default:                            symbolName = "questionmark"
           }

           return symbolName
       }

    var color: Color {
        let defaultColor = Color.black // Set a default color in case there's no specific mapping

        switch self {
        case .running, .cycling, .hiking, .walking:
            return Color.green
        case .swimming, .waterFitness, .waterPolo, .waterSports:
            return Color.teal
        case .yoga, .mindAndBody, .pilates:
            return Color.green
        case .climbing, .functionalStrengthTraining, .traditionalStrengthTraining:
            return Color.blue
        case .boxing, .martialArts, .wrestling:
            return Color.red
        case .dance, .danceInspiredTraining:
            return Color.purple
        case .rowing:
            return Color.yellow
        case .snowboarding:
            return Color.indigo
        case .elliptical, .stairClimbing:
            return Color.pink
        case .golf:
            return Color.green
        case .tennis, .tableTennis:
            return Color.orange
        case .baseball, .basketball, .soccer, .volleyball:
            return Color.red
        case .badminton, .racquetball, .squash:
            return Color.pink
        case .crossCountrySkiing, .downhillSkiing:
            return Color.indigo
        case .surfingSports, .snowSports:
            return Color.teal
        case .hockey:
            return Color.red
        case .skatingSports:
            return Color.purple
        case .equestrianSports:
            return Color.brown
        case .fishing, .hunting:
            return Color.gray
        case .handball, .lacrosse:
            return Color.pink
        case .play, .preparationAndRecovery:
            return Color.yellow
        case .discSports, .fitnessGaming:
            return Color.green
        case .mixedMetabolicCardioTraining, .mixedCardio, .highIntensityIntervalTraining:
            return Color.orange
        case .coreTraining, .stepTraining, .jumpRope, .barre, .flexibility:
            return Color.pink
        case .wheelchairWalkPace, .wheelchairRunPace, .handCycling:
            return Color.blue

        // Catch-all
        default:
            return defaultColor
        }
    }
}

```

Contents of FitnessApp/Preview Content/Preview Assets.xcassets/Contents.json:
```
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

```

Contents of FitnessApp/Profile/ViewModel/ProfileViewModel.swift:
```
//
//  ProfileViewModel.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/15/25.
//

import SwiftUI

import SwiftUI

class ProfileViewModel: ObservableObject {
    @AppStorage("username") var storedUsername: String?
    @AppStorage("emoji") private var storedEmoji: String?
    @AppStorage("color") private var storedColor: String?

    @Published var name: String = ""
    @Published var selectedEmoji: String = "😃"
    @Published var selectedBackgroundColor: Color = .gray.opacity(0.4)

    @Published var isNameEditTapped: Bool = false
    @Published var isAvatarEditTapped: Bool = false
    @Published var isContactUsTapped: Bool = false
    @Published var isPrivacyPolicyTapped: Bool = false

    let colorOptions: [Color] = [
        .red, .orange, .yellow, .green, .mint, .teal, .cyan, .blue, .indigo, .purple,
        .pink, .brown, .gray, .black, .white, .red.opacity(0.5), .blue.opacity(0.5), .green.opacity(0.5), .orange.opacity(0.5), .purple.opacity(0.5)
    ]
    
    let emojiOptions: [String] = [
        "😀", "😃", "😄", "😁", "😆", "😅", "😂", "🤣", "😊", "😇",
        "🙂", "🙃", "😉", "😍", "😘", "😜", "😎", "🥳", "🤩", "🤔", "🤓", "🥺", "🥶", "🧃"
    ]

    var greeting: String {
        let hour = Calendar.current.component(.hour, from: Date())
        switch hour {
        case 6..<12: return "Доброе утро,"
        case 12..<18: return "Добрый день,"
        case 18..<22: return "Добрый вечер,"
        default: return "Доброй ночи,"
        }
    }

    init() {
        loadStoredData()
    }

    deinit {
        saveToStorage()
    }

    private func loadStoredData() {
        name = storedUsername ?? ""
        selectedEmoji = storedEmoji ?? "😃"
        if let hexColor = storedColor {
            selectedBackgroundColor = Color.fromHex(hexColor) ?? .gray.opacity(0.4)
        }
    }

    private func saveToStorage() {
        storedUsername = name
        storedEmoji = selectedEmoji
        storedColor = selectedBackgroundColor.toHex()
    }
}

extension Color {
    func toHex() -> String? {
        guard let components = UIColor(self).cgColor.components else { return nil }
        let r = Int(components[0] * 255)
        let g = Int(components[1] * 255)
        let b = Int(components[2] * 255)
        return String(format: "#%02X%02X%02X", r, g, b)
    }

    static func fromHex(_ hex: String) -> Color? {
        var hexSanitized = hex.trimmingCharacters(in: .whitespacesAndNewlines)
        hexSanitized = hexSanitized.replacingOccurrences(of: "#", with: "")

        var rgb: UInt64 = 0
        Scanner(string: hexSanitized).scanHexInt64(&rgb)

        let r = Double((rgb >> 16) & 0xFF) / 255.0
        let g = Double((rgb >> 8) & 0xFF) / 255.0
        let b = Double(rgb & 0xFF) / 255.0

        return Color(red: r, green: g, blue: b)
    }
}

```

Contents of FitnessApp/Profile/View/ProfileView.swift:
```
//
//  ProfileView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/13/25.
//

import SwiftUI

struct ProfileView: View {
    @Binding var showTerms: Bool
    @StateObject var vm = ProfileViewModel()
    
    var body: some View {
        VStack() {
            HStack(spacing: 20) {
                Text(vm.selectedEmoji)
                    .font(.system(size: 80))
                    .background {
                        RoundedRectangle(cornerRadius: 10)
                            .aspectRatio(1 / 1, contentMode: .fill)
                            .foregroundColor(vm.selectedBackgroundColor)
                    }
                    .frame(width: 100, height: 100)
                VStack(alignment: .leading) {
                    Text(vm.greeting)
                        .font(.title)
                        .foregroundStyle(.white.opacity(0.6))
                    Text(vm.name)
                        .font(.largeTitle)
                        .fontDesign(.rounded)
                }
            }
            .padding()
            .frame(maxWidth: .infinity, alignment: .topLeading)
            
            Form {
                Section(header: Text("Изменить")) {
                    ProfileButtonView(title: "Имя", image: "person.fill", color: .blue) {
                        withAnimation {
                            vm.isNameEditTapped.toggle()
                        }
                    }
                    
                    if vm.isNameEditTapped {
                        TextField("Введите имя", text: $vm.name)
                            .padding(5)
                            .padding(.horizontal, 5)
                            .overlay(RoundedRectangle(cornerRadius: 7).stroke(Color.gray, lineWidth: 1))
                            .onSubmit {
                                withAnimation {
                                    vm.isNameEditTapped.toggle()
                                    vm.storedUsername = vm.name
                                }
                            }
                    }
                    
                    ProfileButtonView(title: "Аватар", image: "photo.on.rectangle.fill", color: .indigo) {
                        withAnimation {
                            vm.isAvatarEditTapped.toggle()
                        }
                    }
                    
                    if vm.isAvatarEditTapped {
                        VStack {
                            Text("Выбрать цвет фона")
                                .font(.headline)
                                .padding(.top)
                            
                            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 5), spacing: 10) {
                                ForEach(vm.colorOptions, id: \.self) { color in
                                    Circle()
                                        .fill(color)
                                        .frame(width: 40, height: 40)
                                        .overlay(
                                            Circle()
                                                .stroke(Color.white, lineWidth: vm.selectedBackgroundColor == color ? 3 : 0)
                                        )
                                        .onTapGesture {
                                            withAnimation {
                                                vm.selectedBackgroundColor = color
                                            }
                                        }
                                }
                            }
                            .padding()
                            
                            Text("Выбрать emoji")
                                .font(.headline)
                                .padding(.top)
                            
                            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 6), spacing: 10) {
                                ForEach(vm.emojiOptions, id: \.self) { emoji in
                                    Text(emoji)
                                        .font(.system(size: 35))
                                        .frame(width: 50, height: 50)
                                        .background(
                                            Circle()
                                                .fill(vm.selectedEmoji == emoji ? .green.opacity(0.3) : Color.clear)
                                        )
                                        .onTapGesture {
                                            withAnimation {
                                                vm.selectedEmoji = emoji
                                            }
                                        }
                                }
                            }
                        }
                        .padding()
                    }
                }
                
                Section(header: Text("ИНФО")) {
                    ProfileButtonView(title: "Связаться с нами", image: "person.fill", color: .orange) {
                        withAnimation {
                            vm.isContactUsTapped.toggle()
                        }
                    }
                    
                    if vm.isContactUsTapped {
                        Link(destination: URL(string: "mailto:madmaxdmitrochenko@gmail.com")!) {
                            Text(verbatim: "madmaxdmitrochenko@gmail.com")
                                .foregroundStyle(.foreground)
                        }
                    }
                    
                    ProfileButtonView(title: "Политика конфиденциальности", image: "photo.on.rectangle.fill", color: .green) {
                        withAnimation {
                            vm.isPrivacyPolicyTapped.toggle()
                        }
                    }
                    
                    if vm.isPrivacyPolicyTapped {
                        Link("Политика конфиденциальности Firebase", destination: URL(string: "https://firebase.google.com/terms")!)
                            .foregroundStyle(.blue)
                    }
                    
//                    ProfileButtonView(title: "Terms Of Service ", image: "photo.on.rectangle.fill", color: .pink) {
//                        
//                    }
                }
            }
            .foregroundStyle(.foreground)
            
            Spacer()
        }
        .onAppear {
            vm.name = vm.storedUsername ?? ""
        }
        .padding(.top)
        .fullScreenCover(isPresented: $showTerms) {
            TermsView()
        }
        .onChange(of: vm.storedUsername) { _, newValue in
            vm.name = newValue ?? ""
        }
    }
}

#Preview {
    ProfileView(showTerms: .constant(false))
}

```

Contents of FitnessApp/Profile/View/ProfileButtonView.swift:
```
//
//  ProfileButtonView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/15/25.
//

import SwiftUI

struct ProfileButtonView: View {
    var title: String
    var image: String
    var color: Color
    var action: () -> Void
    
    var body: some View {
        Button {
            action()
        } label: {
            HStack {
                Image(systemName: image)
                    .foregroundStyle(.primary)
                    .scaledToFill()
                    .padding(5)
                    .background {
                        RoundedRectangle(cornerRadius: 5)
                            .fill(color.gradient)
                            .frame(width: 30, height: 30)
                    }
                    .frame(width: 30, height: 30)
                Text(title)
            }
        }
    }
}

#Preview {
    ProfileButtonView(title: "О нас", image: "house", color: .green, action: {})
}

```

Contents of FitnessApp/Leaderboards/ViewModel/LeaderboardViewModel.swift:
```
//
//  LeaderboardViewModel.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/10/25.
//

import Foundation

@MainActor
class LeaderboardViewModel: ObservableObject {
    @Published var leaderResult = LeaderboardResult(user: nil, top10: [])
    
    var mockData: [LeaderboardUser] = [
        LeaderboardUser(username: "aiX", count: 12345),
        LeaderboardUser(username: "jason dubbon", count: 12345),
        LeaderboardUser(username: "sean allen", count: 12345),
        LeaderboardUser(username: "lev", count: 12345),
        LeaderboardUser(username: "hacking with swift", count: 12345),
        LeaderboardUser(username: "aiX", count: 12345),
        LeaderboardUser(username: "jason dubbon", count: 12345),
        LeaderboardUser(username: "sean allen", count: 12345),
        LeaderboardUser(username: "lev", count: 12345),
        LeaderboardUser(username: "hacking with swift", count: 12345),
    ]
    
    struct LeaderboardResult {
        let user: LeaderboardUser?
        let top10: [LeaderboardUser]
    }
    
    init() {
        Task {
            do {
                try await setupLeaderboardData()
            } catch {
                print(error.localizedDescription)
            }
        }
        
    }
    
    func setupLeaderboardData() async throws {
        try await postStepCountUpdateForUser()
        let result = try await fetchLeaderboard()
        DispatchQueue.main.async {
            self.leaderResult = result
        }
    }
    
    private func fetchLeaderboard() async throws -> LeaderboardResult {
        let leaders = try await DatabaseManager.shared.fetchLeaderboards()
        let top10 = Array(leaders.sorted { $0.count > $1.count }.prefix(10))
        let username = UserDefaults.standard.string(forKey: "username")
        
        if let username = username, !top10.contains(where: { $0.username == username }) {
            let user = leaders.first(where: { $0.username == username })
            return LeaderboardResult(user: user, top10: top10)
        } else {
            return LeaderboardResult(user: nil, top10: top10)
        }
    }
    
    private func postStepCountUpdateForUser() async throws {
        guard let username = UserDefaults.standard.string(forKey: "username") else { throw URLError(.badURL) }
        let steps = try await fetchCurrentWeekStepCount()
        
        let leader = LeaderboardUser(username: username, count: Int(steps))
        try await DatabaseManager.shared.postStepCountUpdate(leader: leader)
    }
    
    private func fetchCurrentWeekStepCount() async throws -> Double {
        try await withCheckedThrowingContinuation { continuation in
            HealthManager.shared.fetchCurrentWeekStepCount { result in
                continuation.resume(with: result)
            }
        }
    }
    
    public func updateUsername(oldUsername: String, newUsername: String) async throws {
        try await DatabaseManager.shared.updateUsername(oldUsername: oldUsername, newUsername: newUsername)
        let result = try await fetchLeaderboard()
        DispatchQueue.main.async {
            self.leaderResult = result
        }
    }
}

```

Contents of FitnessApp/Leaderboards/Model/LeaderboardUser.swift:
```
//
//  LeaderboardUser.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/10/25.
//

import Foundation

struct LeaderboardUser: Codable, Identifiable {
    var id = UUID()
    let username: String
    let count: Int
}

```

Contents of FitnessApp/Leaderboards/View/LeaderboardView.swift:
```
//
//  LeaderboardView.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/10/25.
//

import SwiftUI

struct LeaderboardView: View {
    @StateObject private var vm = LeaderboardViewModel()
    @AppStorage("username") var username: String?
    @Binding var showTerms: Bool
    
    var body: some View {
        NavigationStack {
            VStack {
                HStack {
                    Text("Имя")
                        .bold()
                    
                    Spacer() 
                    
                    Text("Шаги")
                        .bold()
                }
                .padding()
                
                LazyVStack(spacing: 16) {
                    ForEach(Array(vm.leaderResult.top10.enumerated()), id: \.element.id) { (index, person) in
                        HStack {
                            Text("\(index + 1).")
                                
                            Text(person.username)
                            
                            if username == person.username {
                                Image(systemName: "crown.fill")
                                    .foregroundStyle(.yellow)
                            }
                            
                            Spacer()
                            
                            Text("\(person.count)")
                        }
                        .padding(.horizontal)
                    }
                }
                
                Image(systemName: "ellipsis")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 48, height: 48)
                    .foregroundStyle(.gray.opacity(0.5))
                
                if let user = vm.leaderResult.user {
                    HStack {
                        Text("-")
                            
                        Text(user.username)
                        
                        Spacer()
                        
                        Text("\(user.count)")
                    }
                    .padding(.horizontal)
                }
                
                Spacer()
            }
            .navigationTitle("Таблица лидеров")
            .fullScreenCover(isPresented: $showTerms) {
                TermsView()
            }
            .onChange(of: showTerms) {
                Task {
                    do {
                        if !showTerms && username != nil {
                            try await vm.setupLeaderboardData()
                        }
                    } catch {
                        print(error.localizedDescription)
                    }
                }
            }
            .onChange(of: username) { oldValue, newValue in
                if username != nil {
                    Task {
                        do {
                            try await vm.updateUsername(oldUsername: oldValue ?? "", newUsername: newValue ?? "")
                            try await vm.setupLeaderboardData()
                        } catch {
                            print(error.localizedDescription)
                        }
                    }
                }
            }
        }
    }
}

#Preview {
    LeaderboardView(showTerms: .constant(false))
}

```

Contents of FitnessApp/Leaderboards/View/TermsView.swift:
```
//
//  TermsOfLeaderBoard.swift
//  FitnessApp
//
//  Created by Maxim Dmitrochenko on 3/10/25.
//

import SwiftUI

struct TermsView: View {
    @Environment(\.dismiss) var dismiss
    @AppStorage("username") var username: String?
    @State var name: String = ""
    
    @State var acceptedTerms: Bool = false

    var body: some View {
        NavigationStack {
            VStack {
                TextField("Имя пользователя", text: $name)
                    .padding()
                    .background(Color.gray.opacity(0.2))
                    .cornerRadius(10)
                    .padding()
                
                HStack(alignment: .top) {
                    Button {
                        withAnimation {
                            acceptedTerms.toggle()
                        }
                    } label: {
                        if acceptedTerms {
                            Image(systemName: "square.inset.filled")
                        } else {
                            Image(systemName: "square")
                        }
                    }
                    .foregroundStyle(.green)
                    
                    Text("Нажмите здесь, чтобы подтвердить согласие с пользовательским соглашением")
                }
                .padding(.horizontal)
                
                Button {
                    if acceptedTerms && name.count > 2 {
                        username = name
                        dismiss()
                    }
                } label: {
                    Text("Продолжить")
                        .frame(maxWidth: .infinity)
                        .padding(8)
                }
                .padding(.horizontal)
                .buttonStyle(.borderedProminent)
                .tint(.green)
                
                Spacer()
            }
            .navigationBarTitle("Таблица лидеров")
        }
    }
}

#Preview {
    TermsView()
}

```

